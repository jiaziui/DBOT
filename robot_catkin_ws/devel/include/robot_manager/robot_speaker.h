// Generated by gencpp from file robot_manager/robot_speaker.msg
// DO NOT EDIT!


#ifndef ROBOT_MANAGER_MESSAGE_ROBOT_SPEAKER_H
#define ROBOT_MANAGER_MESSAGE_ROBOT_SPEAKER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_manager
{
template <class ContainerAllocator>
struct robot_speaker_
{
  typedef robot_speaker_<ContainerAllocator> Type;

  robot_speaker_()
    : chinese_text()
    , msg_buffer_flag(0)
    , msg_clear_buffer_flag(0)  {
    }
  robot_speaker_(const ContainerAllocator& _alloc)
    : chinese_text(_alloc)
    , msg_buffer_flag(0)
    , msg_clear_buffer_flag(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chinese_text_type;
  _chinese_text_type chinese_text;

   typedef int32_t _msg_buffer_flag_type;
  _msg_buffer_flag_type msg_buffer_flag;

   typedef int32_t _msg_clear_buffer_flag_type;
  _msg_clear_buffer_flag_type msg_clear_buffer_flag;





  typedef boost::shared_ptr< ::robot_manager::robot_speaker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_manager::robot_speaker_<ContainerAllocator> const> ConstPtr;

}; // struct robot_speaker_

typedef ::robot_manager::robot_speaker_<std::allocator<void> > robot_speaker;

typedef boost::shared_ptr< ::robot_manager::robot_speaker > robot_speakerPtr;
typedef boost::shared_ptr< ::robot_manager::robot_speaker const> robot_speakerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_manager::robot_speaker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_manager::robot_speaker_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_manager::robot_speaker_<ContainerAllocator1> & lhs, const ::robot_manager::robot_speaker_<ContainerAllocator2> & rhs)
{
  return lhs.chinese_text == rhs.chinese_text &&
    lhs.msg_buffer_flag == rhs.msg_buffer_flag &&
    lhs.msg_clear_buffer_flag == rhs.msg_clear_buffer_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_manager::robot_speaker_<ContainerAllocator1> & lhs, const ::robot_manager::robot_speaker_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_manager::robot_speaker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_manager::robot_speaker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_manager::robot_speaker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_manager::robot_speaker_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_manager::robot_speaker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_manager::robot_speaker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_manager::robot_speaker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40c45f84b5c08c0a75df65acb133f8c5";
  }

  static const char* value(const ::robot_manager::robot_speaker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40c45f84b5c08c0aULL;
  static const uint64_t static_value2 = 0x75df65acb133f8c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_manager::robot_speaker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_manager/robot_speaker";
  }

  static const char* value(const ::robot_manager::robot_speaker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_manager::robot_speaker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string chinese_text\n"
"int32 msg_buffer_flag\n"
"int32 msg_clear_buffer_flag\n"
;
  }

  static const char* value(const ::robot_manager::robot_speaker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_manager::robot_speaker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.chinese_text);
      stream.next(m.msg_buffer_flag);
      stream.next(m.msg_clear_buffer_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_speaker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_manager::robot_speaker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_manager::robot_speaker_<ContainerAllocator>& v)
  {
    s << indent << "chinese_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chinese_text);
    s << indent << "msg_buffer_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.msg_buffer_flag);
    s << indent << "msg_clear_buffer_flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.msg_clear_buffer_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MANAGER_MESSAGE_ROBOT_SPEAKER_H
