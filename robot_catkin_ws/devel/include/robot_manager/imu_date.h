// Generated by gencpp from file robot_manager/imu_date.msg
// DO NOT EDIT!


#ifndef ROBOT_MANAGER_MESSAGE_IMU_DATE_H
#define ROBOT_MANAGER_MESSAGE_IMU_DATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_manager
{
template <class ContainerAllocator>
struct imu_date_
{
  typedef imu_date_<ContainerAllocator> Type;

  imu_date_()
    : ax(0)
    , ay(0)
    , az(0)
    , gx(0)
    , gy(0)
    , gz(0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)  {
    }
  imu_date_(const ContainerAllocator& _alloc)
    : ax(0)
    , ay(0)
    , az(0)
    , gx(0)
    , gy(0)
    , gz(0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _ax_type;
  _ax_type ax;

   typedef int32_t _ay_type;
  _ay_type ay;

   typedef int32_t _az_type;
  _az_type az;

   typedef int32_t _gx_type;
  _gx_type gx;

   typedef int32_t _gy_type;
  _gy_type gy;

   typedef int32_t _gz_type;
  _gz_type gz;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;





  typedef boost::shared_ptr< ::robot_manager::imu_date_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_manager::imu_date_<ContainerAllocator> const> ConstPtr;

}; // struct imu_date_

typedef ::robot_manager::imu_date_<std::allocator<void> > imu_date;

typedef boost::shared_ptr< ::robot_manager::imu_date > imu_datePtr;
typedef boost::shared_ptr< ::robot_manager::imu_date const> imu_dateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_manager::imu_date_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_manager::imu_date_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_manager::imu_date_<ContainerAllocator1> & lhs, const ::robot_manager::imu_date_<ContainerAllocator2> & rhs)
{
  return lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.az == rhs.az &&
    lhs.gx == rhs.gx &&
    lhs.gy == rhs.gy &&
    lhs.gz == rhs.gz &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_manager::imu_date_<ContainerAllocator1> & lhs, const ::robot_manager::imu_date_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_manager::imu_date_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_manager::imu_date_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_manager::imu_date_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_manager::imu_date_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_manager::imu_date_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_manager::imu_date_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_manager::imu_date_<ContainerAllocator> >
{
  static const char* value()
  {
    return "576dcb682721d1959a6c3a178592e858";
  }

  static const char* value(const ::robot_manager::imu_date_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x576dcb682721d195ULL;
  static const uint64_t static_value2 = 0x9a6c3a178592e858ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_manager::imu_date_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_manager/imu_date";
  }

  static const char* value(const ::robot_manager::imu_date_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_manager::imu_date_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ax\n"
"int32 ay\n"
"int32 az\n"
"int32 gx\n"
"int32 gy\n"
"int32 gz\n"
"float32 yaw\n"
"float32 pitch\n"
"float32 roll\n"
"\n"
;
  }

  static const char* value(const ::robot_manager::imu_date_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_manager::imu_date_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.gz);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_date_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_manager::imu_date_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_manager::imu_date_<ContainerAllocator>& v)
  {
    s << indent << "ax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<int32_t>::stream(s, indent + "  ", v.az);
    s << indent << "gx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gy);
    s << indent << "gz: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gz);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MANAGER_MESSAGE_IMU_DATE_H
