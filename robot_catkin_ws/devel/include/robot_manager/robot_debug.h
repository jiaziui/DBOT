// Generated by gencpp from file robot_manager/robot_debug.msg
// DO NOT EDIT!


#ifndef ROBOT_MANAGER_MESSAGE_ROBOT_DEBUG_H
#define ROBOT_MANAGER_MESSAGE_ROBOT_DEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_manager
{
template <class ContainerAllocator>
struct robot_debug_
{
  typedef robot_debug_<ContainerAllocator> Type;

  robot_debug_()
    : servo_run_power(0)
    , robot_landF(0)
    , robot_landB(0)
    , robot_fhMax(0)
    , robot_swMax(0)
    , robot_sport_state(0)
    , robot_fwctUp(0)
    , robot_control(0)
    , robot_fwctEnd(0)  {
    }
  robot_debug_(const ContainerAllocator& _alloc)
    : servo_run_power(0)
    , robot_landF(0)
    , robot_landB(0)
    , robot_fhMax(0)
    , robot_swMax(0)
    , robot_sport_state(0)
    , robot_fwctUp(0)
    , robot_control(0)
    , robot_fwctEnd(0)  {
  (void)_alloc;
    }



   typedef int32_t _servo_run_power_type;
  _servo_run_power_type servo_run_power;

   typedef int32_t _robot_landF_type;
  _robot_landF_type robot_landF;

   typedef int32_t _robot_landB_type;
  _robot_landB_type robot_landB;

   typedef int32_t _robot_fhMax_type;
  _robot_fhMax_type robot_fhMax;

   typedef int32_t _robot_swMax_type;
  _robot_swMax_type robot_swMax;

   typedef int32_t _robot_sport_state_type;
  _robot_sport_state_type robot_sport_state;

   typedef int32_t _robot_fwctUp_type;
  _robot_fwctUp_type robot_fwctUp;

   typedef int32_t _robot_control_type;
  _robot_control_type robot_control;

   typedef int32_t _robot_fwctEnd_type;
  _robot_fwctEnd_type robot_fwctEnd;





  typedef boost::shared_ptr< ::robot_manager::robot_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_manager::robot_debug_<ContainerAllocator> const> ConstPtr;

}; // struct robot_debug_

typedef ::robot_manager::robot_debug_<std::allocator<void> > robot_debug;

typedef boost::shared_ptr< ::robot_manager::robot_debug > robot_debugPtr;
typedef boost::shared_ptr< ::robot_manager::robot_debug const> robot_debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_manager::robot_debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_manager::robot_debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_manager::robot_debug_<ContainerAllocator1> & lhs, const ::robot_manager::robot_debug_<ContainerAllocator2> & rhs)
{
  return lhs.servo_run_power == rhs.servo_run_power &&
    lhs.robot_landF == rhs.robot_landF &&
    lhs.robot_landB == rhs.robot_landB &&
    lhs.robot_fhMax == rhs.robot_fhMax &&
    lhs.robot_swMax == rhs.robot_swMax &&
    lhs.robot_sport_state == rhs.robot_sport_state &&
    lhs.robot_fwctUp == rhs.robot_fwctUp &&
    lhs.robot_control == rhs.robot_control &&
    lhs.robot_fwctEnd == rhs.robot_fwctEnd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_manager::robot_debug_<ContainerAllocator1> & lhs, const ::robot_manager::robot_debug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_manager::robot_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_manager::robot_debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_manager::robot_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_manager::robot_debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_manager::robot_debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_manager::robot_debug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_manager::robot_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f2e39311972ce7b431a280d95b132fa";
  }

  static const char* value(const ::robot_manager::robot_debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f2e39311972ce7bULL;
  static const uint64_t static_value2 = 0x431a280d95b132faULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_manager::robot_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_manager/robot_debug";
  }

  static const char* value(const ::robot_manager::robot_debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_manager::robot_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 servo_run_power\n"
"int32 robot_landF\n"
"int32 robot_landB\n"
"int32 robot_fhMax\n"
"int32 robot_swMax\n"
"int32 robot_sport_state\n"
"int32 robot_fwctUp\n"
"int32 robot_control\n"
"int32 robot_fwctEnd\n"
;
  }

  static const char* value(const ::robot_manager::robot_debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_manager::robot_debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_run_power);
      stream.next(m.robot_landF);
      stream.next(m.robot_landB);
      stream.next(m.robot_fhMax);
      stream.next(m.robot_swMax);
      stream.next(m.robot_sport_state);
      stream.next(m.robot_fwctUp);
      stream.next(m.robot_control);
      stream.next(m.robot_fwctEnd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_manager::robot_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_manager::robot_debug_<ContainerAllocator>& v)
  {
    s << indent << "servo_run_power: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo_run_power);
    s << indent << "robot_landF: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_landF);
    s << indent << "robot_landB: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_landB);
    s << indent << "robot_fhMax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_fhMax);
    s << indent << "robot_swMax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_swMax);
    s << indent << "robot_sport_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_sport_state);
    s << indent << "robot_fwctUp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_fwctUp);
    s << indent << "robot_control: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_control);
    s << indent << "robot_fwctEnd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_fwctEnd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MANAGER_MESSAGE_ROBOT_DEBUG_H
