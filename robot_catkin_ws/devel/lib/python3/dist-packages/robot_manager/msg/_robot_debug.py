# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_manager/robot_debug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_debug(genpy.Message):
  _md5sum = "2f2e39311972ce7b431a280d95b132fa"
  _type = "robot_manager/robot_debug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 servo_run_power
int32 robot_landF
int32 robot_landB
int32 robot_fhMax
int32 robot_swMax
int32 robot_sport_state
int32 robot_fwctUp
int32 robot_control
int32 robot_fwctEnd
"""
  __slots__ = ['servo_run_power','robot_landF','robot_landB','robot_fhMax','robot_swMax','robot_sport_state','robot_fwctUp','robot_control','robot_fwctEnd']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       servo_run_power,robot_landF,robot_landB,robot_fhMax,robot_swMax,robot_sport_state,robot_fwctUp,robot_control,robot_fwctEnd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_debug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.servo_run_power is None:
        self.servo_run_power = 0
      if self.robot_landF is None:
        self.robot_landF = 0
      if self.robot_landB is None:
        self.robot_landB = 0
      if self.robot_fhMax is None:
        self.robot_fhMax = 0
      if self.robot_swMax is None:
        self.robot_swMax = 0
      if self.robot_sport_state is None:
        self.robot_sport_state = 0
      if self.robot_fwctUp is None:
        self.robot_fwctUp = 0
      if self.robot_control is None:
        self.robot_control = 0
      if self.robot_fwctEnd is None:
        self.robot_fwctEnd = 0
    else:
      self.servo_run_power = 0
      self.robot_landF = 0
      self.robot_landB = 0
      self.robot_fhMax = 0
      self.robot_swMax = 0
      self.robot_sport_state = 0
      self.robot_fwctUp = 0
      self.robot_control = 0
      self.robot_fwctEnd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.servo_run_power, _x.robot_landF, _x.robot_landB, _x.robot_fhMax, _x.robot_swMax, _x.robot_sport_state, _x.robot_fwctUp, _x.robot_control, _x.robot_fwctEnd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.servo_run_power, _x.robot_landF, _x.robot_landB, _x.robot_fhMax, _x.robot_swMax, _x.robot_sport_state, _x.robot_fwctUp, _x.robot_control, _x.robot_fwctEnd,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.servo_run_power, _x.robot_landF, _x.robot_landB, _x.robot_fhMax, _x.robot_swMax, _x.robot_sport_state, _x.robot_fwctUp, _x.robot_control, _x.robot_fwctEnd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.servo_run_power, _x.robot_landF, _x.robot_landB, _x.robot_fhMax, _x.robot_swMax, _x.robot_sport_state, _x.robot_fwctUp, _x.robot_control, _x.robot_fwctEnd,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9i = None
def _get_struct_9i():
    global _struct_9i
    if _struct_9i is None:
        _struct_9i = struct.Struct("<9i")
    return _struct_9i
