# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_manager/robot_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_state(genpy.Message):
  _md5sum = "5bad53ba22220257c1d7f0639451f8f3"
  _type = "robot_manager/robot_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 robot_electricity
int32 robot_state
int32 robot_driver_state
int32 robot_camera_state


"""
  __slots__ = ['robot_electricity','robot_state','robot_driver_state','robot_camera_state']
  _slot_types = ['float32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_electricity,robot_state,robot_driver_state,robot_camera_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_electricity is None:
        self.robot_electricity = 0.
      if self.robot_state is None:
        self.robot_state = 0
      if self.robot_driver_state is None:
        self.robot_driver_state = 0
      if self.robot_camera_state is None:
        self.robot_camera_state = 0
    else:
      self.robot_electricity = 0.
      self.robot_state = 0
      self.robot_driver_state = 0
      self.robot_camera_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_f3i().pack(_x.robot_electricity, _x.robot_state, _x.robot_driver_state, _x.robot_camera_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.robot_electricity, _x.robot_state, _x.robot_driver_state, _x.robot_camera_state,) = _get_struct_f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_f3i().pack(_x.robot_electricity, _x.robot_state, _x.robot_driver_state, _x.robot_camera_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.robot_electricity, _x.robot_state, _x.robot_driver_state, _x.robot_camera_state,) = _get_struct_f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f3i = None
def _get_struct_f3i():
    global _struct_f3i
    if _struct_f3i is None:
        _struct_f3i = struct.Struct("<f3i")
    return _struct_f3i
